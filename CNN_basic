#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec  6 11:43:02 2019

@author: jeogus
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Mar 18 22:17:39 2019

@author: jeogus
"""

import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, AveragePooling2D
from keras.utils import to_categorical
from keras.models import model_from_json
import os
import matplotlib.pyplot as plt
import sklearn.metrics as metrics
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import train_test_split

#X_train = np.load('X_train.npy')
#X_test = np.load('X_test.npy')
#y_train = np.load('y_train.npy')
#y_test = np.load('y_test.npy')

#X_train, X_test, Y_train, Y_test = train_test_split(X_train_base, Y_train_base, test_size=0.20, random_state=12)
#x_train, x_test, y_train, y_test = train_test_split(X_train_base, Y_train_base, test_size=0.20, random_state=41)
X_train=X_train_base[400:540]
Y_train=Y_train_base[400:540]
X_test=X_train_base[541:600]
Y_test=Y_train_base[541:600]
input_shape =(63,1101,1)
X_train = X_train.reshape(X_train.shape[0], 63, 1101, 1)
X_test = X_test.reshape(X_test.shape[0], 63, 1101, 1)
#x_test = x_test.reshape(X_test.shape[0], 63, 1101, 1)
#y_train_hot = to_categorical(y_train)
#y_test_hot = to_categorical(y_test)
Y_train_hot = to_categorical(Y_train)
Y_test_hot = to_categorical(Y_test)
model = Sequential()
model.add(Conv2D(64, (1, 2), activation='relu', input_shape =(63,1101,1)))
model.add(Conv2D(64, (1, 2), activation='relu', input_shape =(63,1101,1)))
model.add(MaxPooling2D(pool_size=(1, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, kernel_size=(1, 4), activation='relu' ))
model.add(MaxPooling2D(pool_size=(1, 2)))
model.add(Dropout(0.25))


model.add(Conv2D(64, kernel_size=(1, 2), activation='relu' ))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(MaxPooling2D(pool_size=(1, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(MaxPooling2D(pool_size=(1, 2)))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu' ))
model.add(Dropout(0.25))

model.add(Conv2D(16, kernel_size=(2, 2), activation='relu' ))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(16, kernel_size=(2, 2), activation='relu' ))
model.add(Dropout(0.25))
model.add(MaxPooling2D(pool_size=(1, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(2, activation='softmax'))
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])
print (model.summary())
history= model.fit(X_train, Y_train_hot, batch_size=3, epochs=50, verbose=1, validation_data=(X_test, Y_test_hot))
print(history.history.keys())
scores = model.evaluate(X_test, Y_test_hot, verbose=0)
print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
# "Loss"
# serialize model to JSON
model_json = model.to_json()
with open("model.json_jing", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
model.save_weights("model_5_jing.h5")
print("Saved model to disk")

y_pred_ohe = model.predict(X_test) 
y_pred_labels = np.argmax(y_pred_ohe, axis=1)
#confusion_matrix = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_labels)  # shape=(12, 12)


# result plot
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()
